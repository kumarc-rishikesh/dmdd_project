SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE CLOSE_AMENITY(
    PI_AMENITY_ID AMENITIES.AMENITY_ID%TYPE,
    PI_CLOSURE_START DATE,
    PI_CLOSURE_END DATE,
    PI_CLOSURE_REASON VARCHAR
    )
AS 
    v_booking_id NUMBER :=0;
    v_lease_id NUMBER :=0;
    CURSOR my_cursor IS
        SELECT booking_id, lease_lease_id
        FROM amenity_booking
        WHERE booking_from BETWEEN PI_CLOSURE_START AND PI_CLOSURE_END
        OR booking_to BETWEEN PI_CLOSURE_START AND PI_CLOSURE_END;
BEGIN
    
    OPEN my_cursor;
    LOOP
        FETCH my_cursor INTO v_booking_id, v_lease_id;
        EXIT WHEN my_cursor%NOTFOUND;
        CANCEL_AMENITY(v_booking_id,v_lease_id);
        DBMS_OUTPUT.PUT_LINE('BOOKING CANCELLED FOR BOOKING ID: ' || to_char(v_booking_id));
    END LOOP;
    CLOSE my_cursor;
    
    UPDATE AMENITIES
    SET CLOSURE_START = PI_CLOSURE_START,
    CLOSURE_END = PI_CLOSURE_END,
    CLOSURE_REASON = PI_CLOSURE_REASON
    WHERE AMENITY_ID = PI_AMENITY_ID;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('AMENITY CLOSURE DONE');
    
    
    
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END CLOSE_AMENITY;
/

--EXEC BOOK_AMENITY(5,'parking',1, SYSDATE+10 ,SYSDATE+10.5);
--
--EXEC CLOSE_AMENITY(5,SYSDATE+7,SYSDATE+10,'REPAIR WORK');