SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE BOOK_AMENITY(
    PI_LEASE_ID AMENITY_BOOKING.LEASE_lease_id%TYPE,
    PI_AMENITY_NAME VARCHAR2,
    PI_NO_OF_GUESTS AMENITY_BOOKING.no_of_guests%TYPE,
    PI_BOOKING_FROM AMENITY_BOOKING.booking_from%TYPE,
    PI_BOOKING_TO AMENITY_BOOKING.booking_to%TYPE
   )
   AS
    v_max_time NUMBER := 0;
    v_available_slots NUMBER := 1000;
    v_bv_check NUMBER :=0;
    v_amenity_id NUMBER := 0;
    v_lease_check NUMBER := 1;
    v_max_guests NUMBER :=0;
    v_closure_start DATE := SYSDATE;
    v_closure_end DATE := SYSDATE;
    v_closure_reason VARCHAR(50) := '';
    v_total_cost NUMBER :=0;
    E_INVALID_LEASE EXCEPTION;
    E_EXCESS_GUESTS EXCEPTION;
    E_INVALID_TIME_DURATION EXCEPTION;
    E_INVALID_TIME EXCEPTION;
    E_INSUFFICIENT_SLOTS EXCEPTION;
    E_AMENITY_CLOSED EXCEPTION;
    E_EARLY_BOOKING EXCEPTION;
BEGIN
    -- Check for lease
    SELECT lease_id INTO v_lease_check
    FROM LEASE
    WHERE lease_id = PI_LEASE_ID;
    
    IF PI_BOOKING_FROM > PI_BOOKING_TO THEN 
        RAISE E_INVALID_TIME ;
    END IF;
    
    BEGIN
        SELECT AMENITY_ID INTO v_amenity_id 
        FROM AMENITIES
        WHERE amenity_name = lower(PI_AMENITY_NAME);
        
        SELECT GUESTS_PERMITTED INTO v_max_guests 
        FROM AMENITIES
        WHERE AMENITY_ID = v_amenity_id;
        
        IF PI_NO_OF_GUESTS >  v_max_guests THEN
            RAISE E_EXCESS_GUESTS;
        END IF;
        
        SELECT max_duration_hours INTO v_max_time 
        FROM amenities
        WHERE amenity_id = v_amenity_id;
        
        IF (PI_BOOKING_TO - PI_BOOKING_FROM)*24 > v_max_time THEN
            RAISE E_INVALID_TIME_DURATION;
        END IF;
        
        SELECT closure_start INTO v_closure_start FROM amenities
        WHERE amenity_id = v_amenity_id;
        SELECT closure_end INTO v_closure_end FROM amenities
        WHERE amenity_id = v_amenity_id;
        SELECT closure_reason INTO v_closure_reason FROM amenities
        WHERE amenity_id = v_amenity_id;
        
        IF v_closure_start IS NOT NULL AND PI_BOOKING_FROM BETWEEN v_closure_start AND v_closure_end THEN
            RAISE E_AMENITY_CLOSED;
        END IF;
        
        SELECT COUNT(*) INTO v_bv_check
        FROM bookings_view
        WHERE amenity_id = v_amenity_id 
        AND TO_CHAR(TRUNC(PI_BOOKING_FROM, 'HH'), 'DD-MON-YY HH24:MI') = BOOKING_HOUR;
        
        IF v_bv_check > 0 THEN
            SELECT available_slots INTO v_available_slots
            FROM bookings_view 
            WHERE amenity_id = v_amenity_id 
            AND TO_CHAR(TRUNC(PI_BOOKING_FROM, 'HH'), 'DD-MON-YY HH24:MI') = BOOKING_HOUR;       
        ELSE 
            SELECT total_slots INTO v_available_slots
            FROM amenities
            WHERE amenity_id = v_amenity_id;
        END IF;
        
        IF  CEIL(PI_BOOKING_FROM - SYSDATE) < 6 THEN
            RAISE E_EARLY_BOOKING;
        END IF;
        
        IF (1+PI_NO_OF_GUESTS) > v_available_slots THEN
            RAISE E_INSUFFICIENT_SLOTS;
        ELSE
            SELECT HOURLY_CHARGE * ((PI_BOOKING_TO - PI_BOOKING_FROM)*24) INTO v_total_cost 
            FROM AMENITIES
            WHERE amenity_id = v_amenity_id;
            
            INSERT INTO AMENITY_BOOKING VALUES (BOOKING_ID_SEQ.NEXTVAL, PI_NO_OF_GUESTS, PI_BOOKING_FROM, PI_BOOKING_TO, NULL, v_amenity_id, PI_LEASE_ID);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('BOOKING SUCCESSFUL!! BOOKING ID : ' || TO_CHAR(BOOKING_ID_SEQ.CURRVAL || '. THIS BOOKING ID IS REQUIRED IF REQUIRED TO CANCEL'));
            UPDATE LEASE 
            SET PENDING_DUES = NVL(PENDING_DUES,0) + v_total_cost
            WHERE lease_id = PI_LEASE_ID;
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('AMENITY CHARGE OF ' || TO_CHAR(v_total_cost) || ' HAS BEEN ADDED TO THE PENDING DUES IN YOUR LEASE');
        END IF;
        
         
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID AMENITY');
        WHEN E_EXCESS_GUESTS THEN
        DBMS_OUTPUT.PUT_LINE('MAXIMUM GUESTS  ALLOWED ARE ' || TO_CHAR(v_max_guests));
        WHEN E_INVALID_TIME_DURATION THEN
        DBMS_OUTPUT.PUT_LINE('MAX BOOKING DURATION IS : ' || TO_CHAR(v_max_time) || ' HOURS'); 
        WHEN E_INSUFFICIENT_SLOTS THEN
        DBMS_OUTPUT.PUT_LINE('NOT ENOUGH SLOTS FOR YOU AND SPECIFIED NUMBER OF GUESTS');
        WHEN E_AMENITY_CLOSED THEN 
        DBMS_OUTPUT.PUT_LINE('AMENITY IS CLOSED TILL ' || TO_CHAR(v_closure_end, 'DD-MON-YY') || ' FOR REASON: ' || v_closure_reason);
        WHEN E_EARLY_BOOKING THEN 
        DBMS_OUTPUT.PUT_LINE('EARLY BOOKING : AMENITY CAN ONLY BE BOOKED FOR AFTER '|| to_char(SYSDATE + 6,'DD-MON-YY'));
    END;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID LEASE ID');
    WHEN E_INVALID_TIME THEN
        DBMS_OUTPUT.PUT_LINE('BOOKING_FROM MUST BE AFTER BOOKING_TO'); 
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END BOOK_AMENITY;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE CANCEL_AMENITY(
    PI_BOOKING_ID AMENITY_BOOKING.BOOKING_ID%TYPE,
    PI_LEASE_ID AMENITY_BOOKING.LEASE_LEASE_ID%TYPE
    )
AS
    v_check_booking NUMBER :=0;
    v_booking_start DATE := SYSDATE ; 
    v_booking_end DATE := SYSDATE;
    v_actual_lease NUMBER := 0;
    v_total_cost NUMBER := 0;
    v_amenity_id NUMBER := 0;
    E_INVALID_COMBO EXCEPTION;
    E_OLD_BOOKING EXCEPTION;
BEGIN
    SELECT BOOKING_ID INTO v_check_booking
    FROM AMENITY_BOOKING
    WHERE BOOKING_ID = PI_BOOKING_ID;
    
    SELECT LEASE_LEASE_ID INTO v_actual_lease
    FROM AMENITY_BOOKING
    WHERE BOOKING_ID = PI_BOOKING_ID;
    
    IF PI_LEASE_ID != v_actual_lease THEN
    RAISE E_INVALID_COMBO;
    END IF;
    
    SELECT AMENITY_AMENITY_ID INTO v_amenity_id
    FROM AMENITY_BOOKING
    WHERE BOOKING_ID = PI_BOOKING_ID;
    
    SELECT BOOKING_FROM INTO v_booking_start
    FROM AMENITY_BOOKING 
    WHERE BOOKING_ID = PI_BOOKING_ID;
    
    SELECT BOOKING_TO INTO v_booking_end
    FROM AMENITY_BOOKING 
    WHERE BOOKING_ID = PI_BOOKING_ID;
    
    IF v_booking_start < (SYSDATE + INTERVAL '30' MINUTE) THEN 
    RAISE E_OLD_BOOKING;
    END IF;
    
    SELECT HOURLY_CHARGE * ((v_booking_end - v_booking_start)*24) INTO v_total_cost 
    FROM AMENITIES
    WHERE amenity_id = v_amenity_id;
        
    UPDATE AMENITY_BOOKING
    SET CANCELLATION_STATUS = 'cancelled'
    WHERE BOOKING_ID = PI_BOOKING_ID;
    DBMS_OUTPUT.PUT_LINE('BOOKING HAS BEEN CANCELLED FOR BOOKING_ID: ' || TO_CHAR(PI_BOOKING_ID));
    UPDATE LEASE 
    SET PENDING_DUES = NVL(PENDING_DUES,0) - v_total_cost
    WHERE lease_id = PI_LEASE_ID;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('AMENITY CHARGE OF ' || TO_CHAR(v_total_cost) || ' HAS BEEN DEDUCTED FROM THE PENDING DUES IN YOUR LEASE');
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('BOOKING/LEASE COMBO DOES NOT EXIST');
    WHEN E_INVALID_COMBO THEN
    DBMS_OUTPUT.PUT_LINE('BOOKING/LEASE COMBO DOES NOT EXIST');
    WHEN E_OLD_BOOKING THEN
    DBMS_OUTPUT.PUT_LINE('CANCELLATION IS ALLOWED ONLY IF MORE THAN 30 MINUTES BEFORE SCHEDULED START TIME');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END CANCEL_AMENITY;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE CLOSE_AMENITY(
    PI_AMENITY_ID AMENITIES.AMENITY_ID%TYPE,
    PI_CLOSURE_START DATE,
    PI_CLOSURE_END DATE,
    PI_CLOSURE_REASON VARCHAR
    )
AS 
    v_booking_id NUMBER :=0;
    v_lease_id NUMBER :=0;
    CURSOR my_cursor IS
        SELECT booking_id, lease_lease_id
        FROM amenity_booking
        WHERE booking_from BETWEEN PI_CLOSURE_START AND PI_CLOSURE_END
        OR booking_to BETWEEN PI_CLOSURE_START AND PI_CLOSURE_END;
BEGIN
    
    OPEN my_cursor;
    LOOP
        FETCH my_cursor INTO v_booking_id, v_lease_id;
        EXIT WHEN my_cursor%NOTFOUND;
        CANCEL_AMENITY(v_booking_id,v_lease_id);
        DBMS_OUTPUT.PUT_LINE('BOOKING CANCELLED FOR BOOKING ID: ' || to_char(v_booking_id));
    END LOOP;
    CLOSE my_cursor;
    
    UPDATE AMENITIES
    SET CLOSURE_START = PI_CLOSURE_START,
    CLOSURE_END = PI_CLOSURE_END,
    CLOSURE_REASON = PI_CLOSURE_REASON
    WHERE AMENITY_ID = PI_AMENITY_ID;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('AMENITY CLOSURE DONE');
        
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END CLOSE_AMENITY;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_UTILITY(
    PI_UTILITY_NAME UTILITY.UTILITY_NAME%TYPE,
    PI_LEASE_ID UTILITY.LEASE_LEASE_ID%TYPE,
    PI_UNITS_ADD UTILITY.CURR_CYCLE_UNITS%TYPE
    )
AS  
    v_billing_id NUMBER := 0;
    v_last_date DATE := SYSDATE;
    v_unit_cost NUMBER :=0;
    v_cur_units NUMBER :=0;
BEGIN   
    
    SELECT UTILITY_BILLING_ID INTO v_billing_id 
    FROM UTILITY 
    WHERE 
    LEASE_LEASE_ID = PI_LEASE_ID
    AND 
    UTILITY_NAME = PI_UTILITY_NAME;

    SELECT CYCLE_BILLED_ON INTO v_last_date
    FROM UTILITY
    WHERE UTILITY_BILLING_ID = v_billing_id;
    
    SELECT CURR_CYCLE_UNITS INTO v_cur_units
    FROM UTILITY
    WHERE UTILITY_BILLING_ID = v_billing_id;   
    
    SELECT utility_cost INTO v_unit_cost
    FROM UTILITY
    WHERE UTILITY_BILLING_ID = v_billing_id;
    
    IF SYSDATE > v_last_date THEN 
        UPDATE LEASE 
        SET PENDING_DUES = NVL(PENDING_DUES,0) + (v_unit_cost*v_cur_units)
        WHERE lease_id = PI_LEASE_ID;
        DBMS_OUTPUT.PUT_LINE('UPDATING PENDING DUES BY: ' || TO_CHAR(v_unit_cost*v_cur_units));
        COMMIT;
        
        UPDATE UTILITY
        SET CURR_CYCLE_UNITS = PI_UNITS_ADD,
        CYCLE_BILLED_ON = LAST_DAY(SYSDATE)
        WHERE UTILITY_BILLING_ID = v_billing_id;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('SET CURR_CYCLE_UNITS TO 0');
    ELSE 
        UPDATE UTILITY
        SET CURR_CYCLE_UNITS = CURR_CYCLE_UNITS + PI_UNITS_ADD
        WHERE UTILITY_BILLING_ID = v_billing_id;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('ADDED UNITS');
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO PREVIOUS RECORDS FOUND. INSERTING VALUES');
    IF PI_UTILITY_NAME = 'ELECTRICITY' THEN
    INSERT INTO UTILITY VALUES (UTILITY_ID_SEQ.NEXTVAL, PI_UTILITY_NAME, 100.00, 'KWH',PI_UNITS_ADD, LAST_DAY(SYSDATE), PI_LEASE_ID);
    ELSIF PI_UTILITY_NAME = 'ELECTRICITY' THEN
    INSERT INTO UTILITY VALUES (UTILITY_ID_SEQ.NEXTVAL, PI_UTILITY_NAME, 5.00 , 'GALLON',PI_UNITS_ADD, LAST_DAY(SYSDATE), PI_LEASE_ID);
    ELSIF PI_UTILITY_NAME = 'ELECTRICITY' THEN
    INSERT INTO UTILITY VALUES (UTILITY_ID_SEQ.NEXTVAL, PI_UTILITY_NAME, 8.00, 'KG',PI_UNITS_ADD, LAST_DAY(SYSDATE), PI_LEASE_ID);
    END IF;
END UPDATE_UTILITY;
/

CREATE OR REPLACE PROCEDURE ONBOARD_RESIDENT(
    PI_RESIDENT_NAME RESIDENT.RESIDENT_NAME%TYPE,
    PI_PHONE_NO NUMBER,
    PI_NATIONALITY RESIDENT.NATIONALITY%TYPE,
    PI_GENDER RESIDENT.GENDER%TYPE,
    PI_DOB RESIDENT.DOB%TYPE,
    PI_SSN RESIDENT.SSN%TYPE,
    PI_LEASE_ID NUMBER
)
AS
    v_lease_check NUMBER := 1;
    v_ssn_check VARCHAR2(9) := 'xxxxxxxxx';
    E_INVALID_LEASE EXCEPTION;
BEGIN
    SELECT lease_id INTO v_lease_check
    FROM LEASE
    WHERE lease_id = PI_LEASE_ID;
    BEGIN 
        SELECT ssn INTO v_ssn_check
        FROM RESIDENT
        WHERE ssn = PI_SSN;
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A UNIQUE SSN');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN    
            INSERT INTO RESIDENT (
                RESIDENT_ID, RESIDENT_NAME, PHONE_NO, NATIONALITY, GENDER, DOB, SSN, LEASE_LEASE_ID
            ) VALUES (
                RESIDENT_ID_SEQ.NEXTVAL, PI_RESIDENT_NAME, PI_PHONE_NO, PI_NATIONALITY,
                PI_GENDER, PI_DOB, PI_SSN, PI_LEASE_ID
            );
            COMMIT;
    END;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER A VALID LEASE ID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ONBOARD_RESIDENT;
/


--BOOK AMENITY
--invalid lease id
--EXEC BOOK_AMENITY(50000,'parking',1, TO_DATE('18-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('18-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--invalid amenity name
--EXEC BOOK_AMENITY(5,'parkingggggggggg',1, TO_DATE('18-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('18-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--extra guests
--EXEC BOOK_AMENITY(5,'parking',5, TO_DATE('18-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('18-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--booking_to after booking_from 
--EXEC BOOK_AMENITY(5,'parking',1, TO_DATE('20-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('18-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--too long
--EXEC BOOK_AMENITY(5,'parking',2, TO_DATE('18-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('20-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--closure
--EXEC BOOK_AMENITY(5,'pool',2, SYSDATE +10, SYSDATE+10.2);
--no slots
--EXEC BOOK_AMENITY(5,'parking',2, TO_DATE('18-NOV-23 13:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('18-NOV-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));
--proper
--EXEC BOOK_AMENITY(5,'parking',1, TO_DATE('10-DEC-23 14:00:00', 'DD-MON-YY HH24:MI:SS'),TO_DATE('10-DEC-23 15:00:00', 'DD-MON-YY HH24:MI:SS'));

-- CANCEL AMENITY
--EXEC BOOK_AMENITY(5,'parking',1, SYSDATE+10 ,SYSDATE+10.5);
-- WRONG BOOKING_ID
--EXEC CANCEL_AMENITY(1000,5);
-- WRONG LEASE_ID
--EXEC CANCEL_AMENITY(22,1000);
-- BAD TIME 
--EXEC CANCEL_AMENITY(1,1);
--PROPER
--EXEC CANCEL_AMENITY(29,5);

--CLOSE AMENITY
--EXEC BOOK_AMENITY(5,'parking',1, SYSDATE+10 ,SYSDATE+10.5);
-- WORKS
--EXEC CLOSE_AMENITY(5,SYSDATE+7,SYSDATE+10,'REPAIR WORK');

--UPDATE_UTILITY
--works
--EXEC UPDATE_UTILITY('ELECTRICITY',50,2);
